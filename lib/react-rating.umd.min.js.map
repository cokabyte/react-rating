{"version":3,"file":"react-rating.umd.min.js","sources":["../src/utils/style.js","../src/RatingSymbol.js","../src/Rating.js","../src/utils/noop.js","../src/RatingAPILayer.js"],"sourcesContent":["var style = {\n  display: 'inline-block',\n  borderRadius: '50%',\n  border: '5px double white',\n  width: 30,\n  height: 30\n};\n\nexport default {\n  empty: {\n    ...style,\n    backgroundColor: '#ccc'\n  },\n  full: {\n    ...style,\n    backgroundColor: 'black'\n  },\n  placeholder: {\n    ...style,\n    backgroundColor: 'red'\n  }\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n// Return the corresponding React node for an icon.\nconst _iconNode = (icon) => {\n  // If it is already a React Element just return it.\n  if (React.isValidElement(icon)) {\n    return icon;\n  }\n  // If it is an object, try to use it as a CSS style object.\n  if (typeof icon === 'object' && icon !== null) {\n    return <span style={icon} />;\n  }\n  // If it is a string, use it as class names.\n  if (Object.prototype.toString.call(icon) === '[object String]') {\n    return <span className={icon} />;\n  }\n};\n\nclass RatingSymbol extends React.PureComponent {\n  render() {\n    const {\n      index,\n      inactiveIcon,\n      activeIcon,\n      percent,\n      direction,\n      readonly,\n      onClick,\n      onMouseMove,\n      onTouchEnd\n    } = this.props;\n    const backgroundNode = _iconNode(inactiveIcon);\n    const showbgIcon = percent < 100;\n    const bgIconContainerStyle = showbgIcon\n      ? {}\n      : {\n        visibility: 'hidden'\n      };\n    const iconNode = _iconNode(activeIcon);\n    const iconContainerStyle = {\n      display: 'inline-block',\n      position: 'absolute',\n      overflow: 'hidden',\n      top: 0,\n      [direction === 'rtl' ? 'right' : 'left']: 0,\n      width: `${percent}%`\n    };\n    const style = {\n      cursor: !readonly ? 'pointer' : 'not-allowed',\n      display: 'inline-block',\n      position: 'relative'\n    };\n\n    function handleMouseMove(e) {\n      if (onMouseMove) {\n        onMouseMove(index, e);\n      }\n    }\n\n    function handleMouseClick(e) {\n      if (onClick) {\n        // [Supporting both TouchEvent and MouseEvent](https://developer.mozilla.org/en-US/docs/Web/API/Touch_events/Supporting_both_TouchEvent_and_MouseEvent)\n        // We must prevent firing click event twice on touch devices.\n        e.preventDefault();\n        onClick(index, e);\n      }\n    }\n\n    function handleTouchEnd(e) {\n      if (onTouchEnd) {\n        onTouchEnd(index, e);\n      }\n    }\n\n    return (\n      <span\n        style={style}\n        onClick={handleMouseClick}\n        onMouseMove={handleMouseMove}\n        onTouchMove={handleMouseMove}\n        onTouchEnd={handleTouchEnd}\n      >\n        <span style={bgIconContainerStyle}>\n          {backgroundNode}\n        </span>\n        <span style={iconContainerStyle}>\n          {iconNode}\n        </span>\n      </span>\n    );\n  }\n}\n\n// Define propTypes only in development. They will be void in production.\nRatingSymbol.propTypes = typeof __DEV__ !== 'undefined' && __DEV__ && {\n  index: PropTypes.number.isRequired,\n  readonly: PropTypes.bool.isRequired,\n  inactiveIcon: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.object,\n    PropTypes.element\n  ]).isRequired,\n  activeIcon: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.object,\n    PropTypes.element\n  ]).isRequired,\n  percent: PropTypes.number.isRequired,\n  direction: PropTypes.string.isRequired,\n  onClick: PropTypes.func,\n  onMouseMove: PropTypes.func,\n  onTouchMove: PropTypes.func,\n  onTouchEnd: PropTypes.func\n};\n\nexport default RatingSymbol;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Symbol from './RatingSymbol';\n\nclass Rating extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // Indicates the value that is displayed to the user in the form of symbols.\n      // It can be either 0 (for no displayed symbols) or (0, end]\n      displayValue: this.props.value,\n      // Indicates if the user is currently hovering over the rating element\n      interacting: false\n    };\n    this.onMouseLeave = this.onMouseLeave.bind(this);\n    this.symbolMouseMove = this.symbolMouseMove.bind(this);\n    this.symbolClick = this.symbolClick.bind(this);\n    this.symbolEnd = this.symbolEnd.bind(this);\n  }\n\n  // NOTE: This callback is a little bit fragile. Needs some \"care\" because\n  // it relies on brittle state kept with different props and state\n  // combinations to try to figure out from where we are coming, I mean, what\n  // caused this update.\n  componentDidUpdate(prevProps, prevState) {\n    // When hover ends, call this.props.onHover with no value.\n    if (prevState.interacting && !this.state.interacting) {\n      return this.props.onHover();\n    }\n\n    // When hover over.\n    // Hover in should only be emitted while we are hovering (interacting),\n    // unless we changed the value, usually originated by an onClick event.\n    // We do not want to emit a hover in event again on the clicked\n    // symbol.\n    if (this.state.interacting && prevProps.value == this.props.value) {\n      this.props.onHover(this.state.displayValue);\n    }\n\n    if (this.props.value !== prevProps.value) {\n      this.setState((prevState) => ({\n        displayValue: this.props.value\n      }));\n    }\n  }\n\n  symbolEnd(symbolIndex, event) {\n    // Do not raise the click event on quiet mode when a touch end is received.\n    // On quiet mode the touch end event only notifies that we have left the\n    // symbol. We wait for the actual click event to call the symbolClick.\n    // On not quiet mode we simulate the click event on touch end and we just\n    // prevent the real on click event to be raised.\n    // NOTE: I know how we manage click events on touch devices is a little bit\n    // weird because we do not notify the starting value that was clicked but\n    // the last (touched) value.\n    if (!this.props.quiet) {\n      this.symbolClick(symbolIndex, event);\n      event.preventDefault();\n    }\n    // On touch end we are \"leaving\" the symbol.\n    this.onMouseLeave();\n  }\n\n  symbolClick(symbolIndex, event) {\n    const value = this.calculateDisplayValue(symbolIndex, event);\n    this.props.onClick(value, event);\n  }\n\n  symbolMouseMove(symbolIndex, event) {\n    const value = this.calculateDisplayValue(symbolIndex, event);\n    // This call should cause an update only if the state changes.\n    // Mainly the first time the mouse enters and whenever the value changes.\n    // So DidComponentUpdate is NOT called for every mouse movement.\n    this.setState({\n      interacting: !this.props.readonly,\n      displayValue: value\n    });\n  }\n\n  onMouseLeave() {\n    this.setState({\n      displayValue: this.props.value,\n      interacting: false\n    });\n  }\n\n  calculateDisplayValue(symbolIndex, event) {\n    const percentage = this.calculateHoverPercentage(event);\n    // Get the closest top fraction.\n    const fraction = Math.ceil(percentage % 1 * this.props.fractions) / this.props.fractions;\n    // Truncate decimal trying to avoid float precission issues.\n    const precision = 10 ** 3;\n    const displayValue =\n      symbolIndex + (Math.floor(percentage) + Math.floor(fraction * precision) / precision);\n    // ensure the returned value is greater than 0 and lower than totalSymbols\n    return displayValue > 0 ? displayValue > this.props.totalSymbols ? this.props.totalSymbols : displayValue : 1 / this.props.fractions;\n  }\n\n  calculateHoverPercentage(event) {\n    const clientX = event.nativeEvent.type.indexOf(\"touch\") > -1\n      ? event.nativeEvent.type.indexOf(\"touchend\") > -1\n        ? event.changedTouches[0].clientX\n        : event.touches[0].clientX\n      : event.clientX;\n\n    const targetRect = event.target.getBoundingClientRect();\n    const delta = this.props.direction === 'rtl'\n      ? targetRect.right - clientX\n      : clientX - targetRect.left;\n\n    // Returning 0 if the delta is negative solves the flickering issue\n    return delta < 0 ? 0 : delta / targetRect.width;\n  }\n\n  render() {\n    const {\n      readonly,\n      quiet,\n      totalSymbols,\n      value,\n      placeholderValue,\n      direction,\n      emptySymbol,\n      fullSymbol,\n      placeholderSymbol,\n      className,\n      id,\n      style,\n      tabIndex\n    } = this.props;\n    const { displayValue, interacting } = this.state;\n    const symbolNodes = [];\n    const empty = [].concat(emptySymbol);\n    const full = [].concat(fullSymbol);\n    const placeholder = [].concat(placeholderSymbol);\n    const shouldDisplayPlaceholder =\n      placeholderValue !== 0 &&\n      value === 0 &&\n      !interacting;\n\n    // The value that will be used as base for calculating how to render the symbols\n    let renderedValue;\n    if (shouldDisplayPlaceholder) {\n      renderedValue = placeholderValue;\n    } else {\n      renderedValue = quiet ? value : displayValue;\n    }\n\n    // The amount of full symbols\n    const fullSymbols = Math.floor(renderedValue);\n\n    for (let i = 0; i < totalSymbols; i++) {\n      let percent;\n      // Calculate each symbol's fullness percentage\n      if (i - fullSymbols < 0) {\n        percent = 100;\n      } else if (i - fullSymbols === 0) {\n        percent = (renderedValue - i) * 100;\n      } else {\n        percent = 0;\n      }\n\n      symbolNodes.push(\n        <Symbol\n          key={i}\n          index={i}\n          readonly={readonly}\n          inactiveIcon={empty[i % empty.length]}\n          activeIcon={\n            shouldDisplayPlaceholder ? placeholder[i % full.length] : full[i % full.length]\n          }\n          percent={percent}\n          direction={direction}\n          {...(!readonly && {\n            onClick: this.symbolClick,\n            onMouseMove: this.symbolMouseMove,\n            onTouchMove: this.symbolMouseMove,\n            onTouchEnd: this.symbolEnd\n          })}\n        />\n      );\n    }\n\n    return (\n      <span\n        id={id}\n        style={{...style, display: 'inline-block', direction }}\n        className={className}\n        tabIndex={tabIndex}\n        aria-label={this.props['aria-label']}\n        {...(!readonly && {\n          onMouseLeave: this.onMouseLeave\n        })}\n      >\n        {symbolNodes}\n      </span>\n    );\n  }\n}\n\n// Define propTypes only in development.\nRating.propTypes = typeof __DEV__ !== 'undefined' && __DEV__ && {\n  totalSymbols: PropTypes.number.isRequired,\n  value: PropTypes.number.isRequired, // Always >= 0\n  placeholderValue: PropTypes.number.isRequired,\n  readonly: PropTypes.bool.isRequired,\n  quiet: PropTypes.bool.isRequired,\n  fractions: PropTypes.number.isRequired,\n  direction: PropTypes.string.isRequired,\n  emptySymbol: PropTypes.oneOfType([\n    // Array of class names and/or style objects.\n    PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.object, PropTypes.element])),\n    // Class names.\n    PropTypes.string,\n    // Style objects.\n    PropTypes.object,\n    // React element\n    PropTypes.element\n  ]).isRequired,\n  fullSymbol: PropTypes.oneOfType([\n    // Array of class names and/or style objects.\n    PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.object, PropTypes.element])),\n    // Class names.\n    PropTypes.string,\n    // Style objects.\n    PropTypes.object,\n    // React element\n    PropTypes.element\n  ]).isRequired,\n  placeholderSymbol: PropTypes.oneOfType([\n    // Array of class names and/or style objects.\n    PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.object, PropTypes.element])),\n    // Class names.\n    PropTypes.string,\n    // Style objects.\n    PropTypes.object,\n    // React element\n    PropTypes.element\n  ]),\n  onClick: PropTypes.func.isRequired,\n  onHover: PropTypes.func.isRequired\n};\n\nexport default Rating;\n","function noop() {}\nnoop._name = 'react_rating_noop';\n\nexport default noop;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Style from './utils/style';\nimport Rating from './Rating';\nimport noop from './utils/noop';\n\nclass RatingAPILayer extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: props.initialRating\n    };\n    this.handleClick = this.handleClick.bind(this);\n    this.handleHover = this.handleHover.bind(this);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.value === prevState.value && prevProps.initialRating !== this.state.value) {\n      this.setState({\n        value: this.props.initialRating\n      });\n    }\n  }\n\n  handleClick(value, e) {\n    const newValue = this.translateDisplayValueToValue(value);\n    this.props.onClick(newValue);\n    // Avoid calling setState if not necessary. Micro optimisation.\n    if (this.state.value !== newValue) {\n      // If we have a new value trigger onChange callback.\n      this.setState({\n        value: newValue\n      }, () => this.props.onChange(this.state.value));\n    }\n  }\n\n  handleHover(displayValue) {\n    const value = displayValue === undefined\n      ? displayValue\n      : this.translateDisplayValueToValue(displayValue);\n    this.props.onHover(value);\n  }\n\n  translateDisplayValueToValue(displayValue) {\n    const translatedValue = displayValue * this.props.step + this.props.start;\n    // minimum value cannot be equal to start, since it's exclusive\n    return translatedValue === this.props.start\n      ? translatedValue + 1 / this.props.fractions\n      : translatedValue;\n  }\n\n  tranlateValueToDisplayValue(value) {\n    if (value === undefined) {\n      return 0;\n    }\n    return (value - this.props.start) / this.props.step;\n  }\n\n  render() {\n    const {\n      step,\n      emptySymbol,\n      fullSymbol,\n      placeholderSymbol,\n      readonly,\n      quiet,\n      fractions,\n      direction,\n      start,\n      stop,\n      id,\n      className,\n      style,\n      tabIndex\n    } = this.props;\n\n    function calculateTotalSymbols(start, stop, step) {\n      return Math.floor((stop - start) / step);\n    }\n\n    return (\n      <Rating\n        id={id}\n        style={style}\n        className={className}\n        tabIndex={tabIndex}\n        aria-label={this.props['aria-label']}\n        totalSymbols={calculateTotalSymbols(start, stop, step)}\n        value={this.tranlateValueToDisplayValue(this.state.value)}\n        placeholderValue={this.tranlateValueToDisplayValue(this.props.placeholderRating)}\n        readonly={readonly}\n        quiet={quiet}\n        fractions={fractions}\n        direction={direction}\n        emptySymbol={emptySymbol}\n        fullSymbol={fullSymbol}\n        placeholderSymbol={placeholderSymbol}\n        onClick={this.handleClick}\n        onHover={this.handleHover}\n      />\n    );\n  }\n}\n\nRatingAPILayer.defaultProps = {\n  start: 0,\n  stop: 5,\n  step: 1,\n  readonly: false,\n  quiet: false,\n  fractions: 1,\n  direction: 'ltr',\n  onHover: noop,\n  onClick: noop,\n  onChange: noop,\n  emptySymbol: Style.empty,\n  fullSymbol: Style.full,\n  placeholderSymbol: Style.placeholder\n};\n\n// Define propTypes only in development.\nRatingAPILayer.propTypes = typeof __DEV__ !== 'undefined' && __DEV__ && {\n  start: PropTypes.number,\n  stop: PropTypes.number,\n  step: PropTypes.number,\n  initialRating: PropTypes.number,\n  placeholderRating: PropTypes.number,\n  readonly: PropTypes.bool,\n  quiet: PropTypes.bool,\n  fractions: PropTypes.number,\n  direction: PropTypes.string,\n  emptySymbol: PropTypes.oneOfType([\n    // Array of class names and/or style objects.\n    PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.object, PropTypes.element])),\n    // Class names.\n    PropTypes.string,\n    // Style objects.\n    PropTypes.object,\n    // React element\n    PropTypes.element\n  ]),\n  fullSymbol: PropTypes.oneOfType([\n    // Array of class names and/or style objects.\n    PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.object, PropTypes.element])),\n    // Class names.\n    PropTypes.string,\n    // Style objects.\n    PropTypes.object,\n    // React element\n    PropTypes.element\n  ]),\n  placeholderSymbol: PropTypes.oneOfType([\n    // Array of class names and/or style objects.\n    PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.object, PropTypes.element])),\n    // Class names.\n    PropTypes.string,\n    // Style objects.\n    PropTypes.object,\n    // React element\n    PropTypes.element\n  ]),\n  onHover: PropTypes.func,\n  onClick: PropTypes.func,\n  onChange: PropTypes.func\n};\n\nexport default RatingAPILayer;\n"],"names":["style","display","borderRadius","border","width","height","Style","empty","backgroundColor","full","placeholder","_iconNode","icon","React","isValidElement","_typeof","createElement","Object","prototype","toString","call","className","RatingSymbol","value","_iconContainerStyle","_this$props","this","props","index","inactiveIcon","activeIcon","percent","direction","readonly","onClick","onMouseMove","onTouchEnd","backgroundNode","bgIconContainerStyle","visibility","iconNode","iconContainerStyle","position","overflow","top","cursor","handleMouseMove","e","handleMouseClick","preventDefault","onTouchMove","handleTouchEnd","PureComponent","Rating","_this","_classCallCheck","_possibleConstructorReturn","_getPrototypeOf","state","displayValue","interacting","onMouseLeave","bind","_assertThisInitialized","symbolMouseMove","symbolClick","symbolEnd","prevProps","prevState","_this2","onHover","setState","symbolIndex","event","quiet","calculateDisplayValue","percentage","calculateHoverPercentage","fraction","Math","ceil","fractions","precision","pow","floor","totalSymbols","clientX","nativeEvent","type","indexOf","changedTouches","touches","targetRect","target","getBoundingClientRect","delta","right","left","renderedValue","placeholderValue","emptySymbol","fullSymbol","placeholderSymbol","id","tabIndex","_this$state","symbolNodes","concat","shouldDisplayPlaceholder","fullSymbols","i","push","_Symbol","_extends","key","length","noop","_name","RatingAPILayer","initialRating","handleClick","handleHover","newValue","translateDisplayValueToValue","onChange","undefined","translatedValue","step","start","stop","calculateTotalSymbols","tranlateValueToDisplayValue","placeholderRating","defaultProps"],"mappings":"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"}